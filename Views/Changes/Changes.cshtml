@using ITIL.Data.Domain;
@model IEnumerable<Change>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

@{
    ViewData["Title"] = "Cambios";
}

<style>
    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        padding: 8px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    .new-change-button {
        display: inline-block;
        padding: 10px 20px;
        font-size: 16px;
        text-decoration: none;
        background-color: #3012a7;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .new-change-button:hover {
        background-color: #250a91;
    }

    .volver-link {
        color: #000;
        text-decoration: none;
        font-size: 16px;
    }

    .user-links {
        position: absolute;
        top: 20px;
        right: 20px;
    }

    .button-link {
        display: inline-block;
        padding: 5px 10px;
        font-size: 12px;
        text-decoration: none;
        background-color: #3012a7;
        color: white;
        border: none;
        border-radius: 1px;
        cursor: pointer;
    }

    .button-link:hover {
        background-color: #250a91;
    }
    
</style>

<div class="container-fluid">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="/Home/Index">ITIL</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarText">
            <ul class="navbar-nav mr-auto">
            <li class="nav-item">
                <a class="nav-link" href="/ServiceDesk/Incidents">Incidentes</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/Problems">Problemas</a>
            </li>
            <li class="nav-item active">
                <a class="nav-link" href="/Changes">Cambios<span class="sr-only">(current)</span></a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/Configuration/Items">Items</a>
            </li>
            </ul>
            <span class="navbar-text">
                @if (User.Identity.IsAuthenticated)
                {
                <div>
                    @User.Identity.Name
                    <a class="volver-link" href="/Home/Index">Volver</a>
                </div>
                }
            </span>
        </div>
    </nav>  
    <a class="btn btn-outline-success" href="/Changes/NewChange" role="button">+ New</a>
    @if (Model.Any())
        {
        <table class="table">
        <thead>
            <tr>
                <th scope="col">Title</th>
                <th scope="col">Assigned To</th>
                <th scope="col">Client Email</th>
                <th scope="col">State</th>
                <th scope="col">Impact</th>
                <th scope="col">Priority</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var change in Model)
            {
            <tr> 
                <td>@change.Title</td>
                <td>@change.AssignedUser.Email</td>
                <td>@change.ClientEmail</td>
                <td>@change.State</td>
                <td>@change.Impact</td>
                <td>@change.Priority</td>   
                <td><div class="btn-group">
                    <button type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Actions
                    </button>
                    <div class="dropdown-menu">
                        <a class="dropdown-item" href="/Changes/@change.Id">Edit</a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="#" onclick='showCommentsModal("@change.Id")'>View Comments</a>
                        <a class="dropdown-item" href="#" onclick="showCommentModal(@change.Id)">Add Comment</a>
                        <a class="dropdown-item" href="#" onclick='showIncidentsModal("@change.Id")'>View Incidents</a>
                        <a class="dropdown-item" href="#" onclick="showAddIncidentModal(@change.Id)">Add Incident</a>
                        <a class="dropdown-item" href="#" onclick='showProblemsModal("@change.Id")'>View Problems</a>
                        <a class="dropdown-item" href="#" onclick="showAddProblemModal(@change.Id)">Add Problem</a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="#" onclick="confirmDeleteChange(@change.Id)">Delete</a>
                    </div>
                    </div>
                </td>
            </tr>
            }
        </tbody>
    </table>
 
    <div id="commentModal" class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">New Comment</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                 <div class="modal-body">
                    <form>
                    <div class="form-group">
                        <label for="message-text" class="col-form-label">Comment:</label>
                        <textarea class="form-control" id="commentInput" placeholder="Enter your comment"></textarea>
                    </div>
                    </form>
                </div>
                 <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="saveCommentButton" onclick="saveComment()">Save Comment</button>
                </div>
            </div>
        </div>   
    </div>

    <div id="commentsModal" class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Change Comments</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                 <div class="modal-body">
                    <ul id="commentsList" class="list-group"></ul>
                </div>
            </div>
        </div>   
    </div>

    <div id="incidentsModal" class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Change Incidents</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                 <div class="modal-body">
                    <ul id="incidentsList" class="list-group"></ul>
                </div>
            </div>
        </div>   
    </div>

    <div id="addIncidentModal" class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Incident</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                 <div class="modal-body">
                    <form id="addIncidentForm">
                    <div class="form-group">
                        <label for="incidentSelector">Select Incident:</label>
                        <select id="incidentSelector" required></select>
                    </div>
                    </form>
                </div>
                 <div class="modal-footer">
                    <button type="button" id="saveIncidentButton" class="btn btn-primary">Save</button>
                    <button type="button" id="cancelIncidentButton" class="btn btn-secondary">Cancel</button>
                </div>
            </div>
        </div>   
    </div>

    <div id="problemsModal" class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Change Problems</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                 <div class="modal-body">
                    <ul id="problemsList" class="list-group"></ul>
                </div>
            </div>
        </div>   
    </div>

    <div id="addProblemModal" class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Problem</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                 <div class="modal-body">
                    <form id="addProblemForm">
                    <div class="form-group">
                        <label for="problemSelector">Select Problem:</label>
                        <select id="problemSelector" required></select>
                    </div>
                    </form>
                </div>
                 <div class="modal-footer">
                    <button type="button" id="saveProblemButton" class="btn btn-primary">Save</button>
                    <button type="button" id="cancelProblemButton" class="btn btn-secondary">Cancel</button>
                </div>
            </div>
        </div>   
    </div>


        }
        else
        {
            <p>No Changes found.</p>
        }
</div>


<script>
    function confirmDeleteChange(changeId) {
        if (confirm('Are you sure you want to delete this change?')) {
            deleteChange(changeId);
        }
    }

    function deleteChange(changeId) {
        fetch('/Changes/DeleteChange', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(changeId)
        })
        .then(response => {
            if (response.ok) {
                // Refresh the change list or perform any other action
                window.location.reload();
            } else {
                console.error('Error deleting change:', response.statusText);
            }
        })
        .catch(error => {
            console.error('Error deleting change:', error);
        });
    }

    function filterTable(column, value) {
        var filterInput = value.toLowerCase();
        var tableBody = document.getElementById('changesTableBody');
        var rows = tableBody.getElementsByTagName('tr');

        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            var cells = row.getElementsByTagName('td');
            var matched = false;

            for (var j = 0; j < cells.length; j++) {
            var cell = cells[j];
            var cellValue = cell.textContent || cell.innerText;

            if (cellValue.toLowerCase().indexOf(filterInput) > -1) {
                matched = true;
                break;
            }
            }

            if (matched) {
            row.style.display = '';
            } else {
            row.style.display = 'none';
            }
        }
    }

    var currentChangeId;

    // Get the modal element
    var modal = document.getElementById("commentModal");

    // Get the <span> element that closes the modal
    var closeBtn = modal.querySelector(".close");

    // Function to show the modal
    function showCommentModal(changeId) {
        currentChangeId = changeId;
        $('#commentModal').modal('show');
    }

    // Function to close the modal
    function closeModal() {
        $('#commentModal').modal('hide');
    }

    // Close the modal if the user clicks on the close button (X)
    closeBtn.onclick = function() {
        closeModal();
    };

    // Close the modal if the user clicks outside of it
    window.onclick = function(event) {
        if (event.target == modal) {
            closeModal();
        }
    };

    // Function to save the comment
    function saveComment() {
        var comment = document.getElementById("commentInput").value;

        // Make the HTTP POST request to save the comment
        fetch(`/Changes/${currentChangeId}/Comments/SaveComment`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(comment)
        })
        .then(function(response) {
            if (response.ok) {
                // Comment saved successfully, update the UI or take any other necessary action
                console.log("Comment saved successfully");
            } else {
                console.error("Failed to save the comment");
            }
        })
        .catch(function() {
            console.error("Failed to save the comment");
        });

        // Close the modal and reset the input
        closeModal();
        document.getElementById("commentInput").value = "";
    }

    function showCommentsModal(changeId) {
        currentChangeId = changeId;
        fetch(`/Changes/${changeId}/Comments`)
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error(`Error: ${response.status} ${response.statusText}`);
            })
            .then(data => {
                const commentsList = document.getElementById("commentsList");
                commentsList.innerHTML = ""; // Clear any previous comments

                if (data && data.comments && data.comments.$values.length > 0) {
                    data.comments.$values.forEach((comment, index) => {
                        const commentElement = document.createElement("li");
                        commentElement.className = "list-group-item";
                        commentElement.textContent = comment;

                        // Create the delete button for the comment
                        const deleteButton = document.createElement("button");
                        deleteButton.textContent = "Delete";
                        deleteButton.classList.add("button-link");
                        deleteButton.addEventListener("click", () => deleteComment(changeId, index));

                        commentElement.appendChild(deleteButton);
                        commentsList.appendChild(commentElement);
                    });
                } else {
                    const noCommentsMessage = document.createElement("li");
                    noCommentsMessage.textContent = "No comments found.";
                    commentsList.appendChild(noCommentsMessage);
                }

                // Display the comments modal
                $('#commentsModal').modal('show');
            })
            .catch(error => {
                console.error(`Error fetching comments for change ${changeId}:`, error);
            });
    }

    function deleteComment(changeId, commentIndex) {
        if (confirm('Are you sure you want to delete this comment?')) {
            fetch(`/Changes/${changeId}/Comments/${commentIndex}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    // Comment deleted successfully, update the UI or take any other necessary action
                    console.log('Comment deleted successfully');
                    // Refresh the comments list
                    showCommentsModal(changeId);
                } else {
                    console.error('Error deleting comment:', response.statusText);
                }
            })
            .catch(error => {
                console.error('Error deleting comment:', error);
            });
        }
    }

    function closeCommentsModal() {
        $('#commentsModal').modal('hide');
    }

    function showIncidentsModal(changeId) {
        currentChangeId = changeId;
        fetch(`/Changes/${changeId}/Incidents`)
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error(`Error: ${response.status} ${response.statusText}`);
            })
            .then(data => {
                console.log(data); // Log the data to the console

                const incidentsList = document.getElementById("incidentsList");
                incidentsList.innerHTML = ""; // Clear any previous incidents

                if (data && data.$values && data.$values.length > 0) {
                    data.$values.forEach(incident => {
                        const incidentElement = document.createElement("li");
                        incidentElement.className = "list-group-item";
                        incidentElement.textContent = incident.title;

                        const removeButton = document.createElement("button");
                        removeButton.textContent = "Remove";
                        removeButton.classList.add("button-link");
                        removeButton.addEventListener("click", () => {
                            removeIncident(changeId, incident.id);
                        });

                        incidentElement.appendChild(removeButton);
                        incidentsList.appendChild(incidentElement);
                    });
                } else {
                    const noIncidentsMessage = document.createElement("li");
                    noIncidentsMessage.textContent = "No incidents found.";
                    incidentsList.appendChild(noIncidentsMessage);
                }

                // Display the incidents modal
                $('#incidentsModal').modal('show');
            })
            .catch(error => {
                console.error(`Error fetching incidents for change ${changeId}:`, error);
            });
    }

    function removeIncident(changeId, incidentId) {
        fetch(`/Changes/${changeId}/Incidents/${incidentId}`, {
            method: "DELETE"
        })
        .then(response => {
            if (response.ok) {
                console.log(`Incident ${incidentId} removed successfully.`);
                showIncidentsModal(changeId); // Refresh the incidents list
            } else {
                throw new Error(`Error: ${response.status} ${response.statusText}`);
            }
        })
        .catch(error => {
            console.error(`Error removing incident ${incidentId}:`, error);
        });
    }

    function closeIncidentsModal() {
        const incidentsModal = document.getElementById("incidentsModal");
        incidentsModal.style.display = "none";
    }

    function showProblemsModal(changeId) {
        currentChangeId = changeId;
        fetch(`/Changes/${changeId}/Problems`)
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error(`Error: ${response.status} ${response.statusText}`);
            })
            .then(data => {
                console.log(data); // Log the data to the console

                const problemsList = document.getElementById("problemsList");
                problemsList.innerHTML = ""; // Clear any previous problems

                if (data && data.$values && data.$values.length > 0) {
                    data.$values.forEach(problem => {
                        const problemElement = document.createElement("li");
                        problemElement.className = "list-group-item";
                        problemElement.textContent = problem.title;

                        const removeButton = document.createElement("button");
                        removeButton.textContent = "Remove";
                        removeButton.classList.add("button-link");
                        removeButton.addEventListener("click", () => {
                            removeProblem(changeId, problem.id);
                        });

                        problemElement.appendChild(removeButton);
                        problemsList.appendChild(problemElement);
                    });
                } else {
                    const noProblemsMessage = document.createElement("li");
                    noProblemsMessage.textContent = "No problems found.";
                    problemsList.appendChild(noProblemsMessage);
                }

                // Display the problems modal
                $('#problemsModal').modal('show');
            })
            .catch(error => {
                console.error(`Error fetching problems for change ${changeId}:`, error);
            });
    }

    function removeProblem(changeId, problemId) {
        fetch(`/Changes/${changeId}/Problems/${problemId}`, {
            method: "DELETE"
        })
        .then(response => {
            if (response.ok) {
                console.log(`Problem ${problemId} removed successfully.`);
                showProblemsModal(changeId); // Refresh the problems list
            } else {
                throw new Error(`Error: ${response.status} ${response.statusText}`);
            }
        })
        .catch(error => {
            console.error(`Error removing problem ${problemId}:`, error);
        });
    }

    function closeProblemsModal() {
         $('#problemsModal').modal('hide');
    }
    
    function showAddIncidentModal(changeId) {
        $('#addIncidentModal').modal('show');

        // Fetch the existing incidents
        fetch("/ServiceDesk/GetIncidents")
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error(`Error: ${response.status} ${response.statusText}`);
            })
            .then(data => {
                console.log(data); // Log the incidents data to the console

                // Extract the incidents array from the response
                const incidents = data["$values"];

                // Populate the incident selector options
                const incidentSelector = document.getElementById("incidentSelector");
                incidentSelector.innerHTML = ""; // Clear previous options

                incidents.forEach(incident => {
                    const option = document.createElement("option");
                    option.value = incident.id;
                    option.textContent = incident.title;
                    incidentSelector.appendChild(option);
                });
            })
            .catch(error => {
                console.error("Error fetching incidents:", error);
            });

        // Save button click handler
        const saveButton = document.getElementById("saveIncidentButton");
        saveButton.onclick = function () {
            const incidentSelector = document.getElementById("incidentSelector");
            const selectedIncidentId = incidentSelector.value;

            if (selectedIncidentId) {
                addIncident(changeId, selectedIncidentId);
                modal.style.display = "none";
            } else {
                console.error("No incident selected.");
            }
        };

        // Cancel button click handler
        const cancelButton = document.getElementById("cancelIncidentButton");
        cancelButton.onclick = function () {
            modal.style.display = "none";
        };
    }

    function addIncident(changeId, incidentId) {
        const url = `/Changes/${changeId}/Incidents/${incidentId}`;

        fetch(url, {
            method: "PATCH",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ changeId, incidentId })
        })
        .then(response => {
            if (response.ok) {
                // Handle successful response
                console.log("Incident added successfully");
                // Perform any necessary updates or refresh the table
            } else {
                throw new Error(`Error: ${response.status} ${response.statusText}`);
            }
        })
        .catch(error => {
            console.error("Error adding incident:", error);
        });
    }

    function closeAddIncidentModal() {
        $('#addIncidentModal').modal('hide');
    }

    function showAddProblemModal(changeId) {
        $('#addProblemModal').modal('show');

        // Fetch the existing problems
        fetch("/Problems/GetProblems")
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error(`Error: ${response.status} ${response.statusText}`);
            })
            .then(data => {
                console.log(data); // Log the problems data to the console

                // Extract the problems array from the response
                const problems = data["$values"];

                // Populate the problem selector options
                const problemSelector = document.getElementById("problemSelector");
                problemSelector.innerHTML = ""; // Clear previous options

                problems.forEach(problem => {
                    const option = document.createElement("option");
                    option.value = problem.id;
                    option.textContent = problem.title;
                    problemSelector.appendChild(option);
                });
            })
            .catch(error => {
                console.error("Error fetching problems:", error);
            });

        // Save button click handler
        const saveButton = document.getElementById("saveProblemButton");
        saveButton.onclick = function () {
            const problemSelector = document.getElementById("problemSelector");
            const selectedProblemId = problemSelector.value;

            if (selectedProblemId) {
                addProblem(changeId, selectedProblemId);
                $('#addProblemModal').modal('hide');
            } else {
                console.error("No problem selected.");
            }
        };

        // Cancel button click handler
        const cancelButton = document.getElementById("cancelProblemButton");
        cancelButton.onclick = function () {
            $('#addProblemModal').modal('hide');
        };
    }

    function addProblem(changeId, problemId) {
        const url = `/Changes/${changeId}/Problems/${problemId}`;

        fetch(url, {
            method: "PATCH",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ changeId, problemId })
        })
        .then(response => {
            if (response.ok) {
                // Handle successful response
                console.log("Problem added successfully");
                // Perform any necessary updates or refresh the table
            } else {
                throw new Error(`Error: ${response.status} ${response.statusText}`);
            }
        })
        .catch(error => {
            console.error("Error adding problem:", error);
        });
    }

    function closeAddProblemModal() {
        $('#addProblemModal').modal('hide');
    }
</script>

<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
