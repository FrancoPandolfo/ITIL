@using ITIL.Data.Domain;
@model IEnumerable<Problem>

@{
    ViewData["Title"] = "Problemas";
}

<style>
    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        padding: 8px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    .new-problem-button {
        display: inline-block;
        padding: 10px 20px;
        font-size: 16px;
        text-decoration: none;
        background-color: #3012a7;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .new-problem-button:hover {
        background-color: #250a91;
    }

    .volver-link {
        color: #000;
        text-decoration: none;
        font-size: 16px;
    }

    .user-links {
        position: absolute;
        top: 20px;
        right: 20px;
    }

    .button-link {
        display: inline-block;
        padding: 5px 10px;
        font-size: 12px;
        text-decoration: none;
        background-color: #3012a7;
        color: white;
        border: none;
        border-radius: 1px;
        cursor: pointer;
    }

    .button-link:hover {
        background-color: #250a91;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 10% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 600px;
    }

    .close {
        color: #888;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

    .close:hover,
    .close:focus {
        color: #000;
        text-decoration: none;
        cursor: pointer;
    }
</style>

<h1>@ViewData["Title"]</h1>

<a class="new-problem-button" href="/Problems/NewProblem">Nuevo Problema</a>

<div class="user-links">
    @if (User.Identity.IsAuthenticated)
    {
        <span>@User.Identity.Name</span>
    }
    <a class="volver-link" href="/Home/Index">Volver</a>
</div>

@if (Model.Any())
{
<table>
    <thead>
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Assigned To</th>
            <th>Impact</th>
            <th>Priority</th>
            <th>Created Date</th>
            <th>Incidents</th>
            <th>Comments</th>
            <th>Actions</th>
        </tr>
        <tr>
            <th><input type="text" id="filterProblemTitle" onkeyup="filterTable('ProblemTitle', this.value)" placeholder="Filter Title"></th>
            <th><input type="text" id="filterProblemDescription" onkeyup="filterTable('ProblemDescription', this.value)" placeholder="Filter Description"></th>
            <th><input type="text" id="filterProblemAssignedTo" onkeyup="filterTable('ProblemAssignedTo', this.value)" placeholder="Filter Assigned To"></th>
            <th><input type="text" id="filterProblemImpact" onkeyup="filterTable('ProblemImpact', this.value)" placeholder="Filter Impact"></th>
            <th><input type="text" id="filterProblemPriority" onkeyup="filterTable('ProblemPriority', this.value)" placeholder="Filter Priority"></th>
            <th><input type="text" id="filterProblemCreatedDate" onkeyup="filterTable('ProblemCreatedDate', this.value)" placeholder="Filter Created Date"></th>
        </tr>
    </thead>
    <tbody id="problemTableBody">
        @foreach (var problem in Model)
        {
            <tr>
                <td>@problem.Title</td>
                <td>@problem.Description</td>
                <td>@problem.AssignedUser.Email</td>
                <td>@problem.Impact</td>
                <td>@problem.Priority</td>
                <td>@problem.CreatedDate</td>
                <td>
                    <button class="button-link" type="button" onclick='showIncidentsModal("@problem.Id")'>View Incidents</button>
                </td>
                <td>
                    <button class="button-link" type="button" onclick='showCommentsModal("@problem.Id")'>View Comments</button>
                </td>
                <td>
                    <a href="/Problems/@problem.Id" class="button-link">Edit</a>
                    <button class="button-link" type="button" onclick="confirmDeleteProblem(@problem.Id)">Delete</button>
                    <button class="button-link" type="button" onclick="showCommentModal(@problem.Id)">Add Comment</button>
                </td>
            </tr>
            <tr>
                <td colspan="6"><hr></td>
            </tr>
        }
    </tbody>
</table>

<div id="commentModal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close">&times;</span>
        <textarea id="commentInput" placeholder="Enter your comment"></textarea>
        <button id="saveCommentButton" onclick="saveComment()">Save Comment</button>
    </div>
</div>

<div id="commentsModal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close" onclick="closeCommentsModal()">&times;</span>
        <h2>Problem Comments</h2>
        <ul id="commentsList"></ul>
    </div>
</div>

<div id="incidentsModal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close" onclick="closeIncidentsModal()">&times;</span>
        <h2>Problem Incidents</h2>
        <ul id="incidentsList"></ul>
    </div>
</div>
}
else
{
    <p>No problems found.</p>
}

<script>
    function confirmDeleteProblem(problemId) {
        if (confirm('Are you sure you want to delete this problem?')) {
            deleteProblem(problemId);
        }
    }

    function deleteProblem(problemId) {
        fetch('/Problems/DeleteProblem', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(problemId)
        })
        .then(response => {
            if (response.ok) {
                // Refresh the problem list or perform any other action
                window.location.reload();
            } else {
                console.error('Error deleting problem:', response.statusText);
            }
        })
        .catch(error => {
            console.error('Error deleting problem:', error);
        });
    }

    function filterTable(column, value) {
        var filterInput = value.toLowerCase();
        var tableBody = document.getElementById('problemTableBody');
        var rows = tableBody.getElementsByTagName('tr');

        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            var cells = row.getElementsByTagName('td');
            var matched = false;

            for (var j = 0; j < cells.length; j++) {
            var cell = cells[j];
            var cellValue = cell.textContent || cell.innerText;

            if (cellValue.toLowerCase().indexOf(filterInput) > -1) {
                matched = true;
                break;
            }
            }

            if (matched) {
            row.style.display = '';
            } else {
            row.style.display = 'none';
            }
        }
    }

    var currentProblemId;

    // Get the modal element
    var modal = document.getElementById("commentModal");

    // Get the <span> element that closes the modal
    var closeBtn = modal.querySelector(".close");

    // Function to show the modal
    function showCommentModal(problemId) {
        currentProblemId = problemId;
        modal.style.display = "block";
    }

    // Function to close the modal
    function closeModal() {
        modal.style.display = "none";
    }

    // Close the modal if the user clicks on the close button (X)
    closeBtn.onclick = function() {
        closeModal();
    };

    // Close the modal if the user clicks outside of it
    window.onclick = function(event) {
        if (event.target == modal) {
            closeModal();
        }
    };

    // Function to save the comment
    function saveComment() {
        var comment = document.getElementById("commentInput").value;

        // Make the HTTP POST request to save the comment
        fetch(`/Problems/${currentProblemId}/Comments/SaveComment`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(comment)
        })
        .then(function(response) {
            if (response.ok) {
                // Comment saved successfully, update the UI or take any other necessary action
                console.log("Comment saved successfully");
            } else {
                console.error("Failed to save the comment");
            }
        })
        .catch(function() {
            console.error("Failed to save the comment");
        });

        // Close the modal and reset the input
        closeModal();
        document.getElementById("commentInput").value = "";
    }

    function showCommentsModal(problemId) {
        currentProblemId = problemId;
        fetch(`/Problems/${problemId}/Comments`)
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error(`Error: ${response.status} ${response.statusText}`);
            })
            .then(data => {
                const commentsList = document.getElementById("commentsList");
                commentsList.innerHTML = ""; // Clear any previous comments

                if (data && data.comments && data.comments.$values.length > 0) {
                    data.comments.$values.forEach((comment, index) => {
                        const commentElement = document.createElement("li");
                        commentElement.textContent = comment;

                        // Create the delete button for the comment
                        const deleteButton = document.createElement("button");
                        deleteButton.textContent = "Delete";
                        deleteButton.classList.add("button-link");
                        deleteButton.addEventListener("click", () => deleteComment(problemId, index));

                        commentElement.appendChild(deleteButton);
                        commentsList.appendChild(commentElement);
                    });
                } else {
                    const noCommentsMessage = document.createElement("li");
                    noCommentsMessage.textContent = "No comments found.";
                    commentsList.appendChild(noCommentsMessage);
                }

                // Display the comments modal
                const commentsModal = document.getElementById("commentsModal");
                commentsModal.style.display = "block";
            })
            .catch(error => {
                console.error(`Error fetching comments for problem ${problemId}:`, error);
            });
    }

    function deleteComment(problemId, commentIndex) {
        if (confirm('Are you sure you want to delete this comment?')) {
            fetch(`/Problems/${problemId}/Comments/${commentIndex}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    // Comment deleted successfully, update the UI or take any other necessary action
                    console.log('Comment deleted successfully');
                    // Refresh the comments list
                    showCommentsModal(problemId);
                } else {
                    console.error('Error deleting comment:', response.statusText);
                }
            })
            .catch(error => {
                console.error('Error deleting comment:', error);
            });
        }
    }

    function closeCommentsModal() {
        const commentsModal = document.getElementById("commentsModal");
        commentsModal.style.display = "none";
    }
    
    function showIncidentsModal(problemId) {
        currentProblemId = problemId;
        fetch(`/Problems/${problemId}/Incidents`)
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error(`Error: ${response.status} ${response.statusText}`);
            })
            .then(data => {
                console.log(data); // Log the data to the console

                const incidentsList = document.getElementById("incidentsList");
                incidentsList.innerHTML = ""; // Clear any previous incidents

                if (data && data.$values && data.$values.length > 0) {
                    data.$values.forEach(problem => {
                        const incidentElement = document.createElement("li");
                        incidentElement.textContent = problem.title;

                        incidentsList.appendChild(incidentElement);
                    });
                } else {
                    const noIncidentsMessage = document.createElement("li");
                    noIncidentsMessage.textContent = "No incidents found.";
                    incidentsList.appendChild(noIncidentsMessage);
                }

                // Display the incidents modal
                const incidentsModal = document.getElementById("incidentsModal");
                incidentsModal.style.display = "block";
            })
            .catch(error => {
                console.error(`Error fetching incidents for problem ${problemId}:`, error);
            });
    }

    function closeIncidentsModal() {
        const incidentsModal = document.getElementById("incidentsModal");
        incidentsModal.style.display = "none";
    }
</script>